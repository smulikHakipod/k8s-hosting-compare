# Github Action that deploy both Grafana + Promtheous using Helm
# Deploy on Push to main branch when this file is changed
# This action should use a SINGLE kuebconfig instead of iterating over all of them
# The specific Kubeconfig file path in the repo should get as a argument
# Again, no need to iterate all kubeconfigs folders by using the "find" command like is done in deploy-uptime.yaml, single kubeconfig is sufficent
# This is going to be deployed on a generic k8s cluster e.g DigitalOcean or Scaleaway, not EKS, AWS, GCP, Azure for example, as they would probably be too expensive, so no EC2 or GP2\3 stuff.

name: Deploy k8s grafana prometheus
on:
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/deploy-grafana-prometheus.yaml"
env:
  KUBECONFIG: "./kubeconfigs/scaleaway-uptime.yaml"

jobs:
  Deploy:
    runs-on: ubuntu-latest
    env:
      RUN_LOCAL: ${{ secrets.RUN_LOCAL }}
    steps:
      - uses: actions/checkout@v3
      - name: Cache download kubectl
        uses: actions/cache@v3
        id: "cache-kubectl"
        with:
          path: /usr/local/bin/kubectl
          key: ${{ runner.os }}-kubectl
      - name: Install kubectl
        shell: bash
        if: steps.cache-kubectl.outputs.cache-hit != 'true'
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -sSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install kubectl /usr/local/bin/kubectl
          kubectl version --client=true
      - uses: azure/setup-helm@v3
      - name: Unlock secrets
        if: ${{ env.RUN_LOCAL != 'true' }}
        uses: sliteteam/github-action-git-crypt-unlock@1.2.0
        env:
          GIT_CRYPT_KEY: ${{ secrets.GPG_PUBLIC_KEY_BLOCK }}
      - name: kubectl apply
        shell: bash
        run: |
          kubectl config get-contexts
          kubectl cluster-info
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

          helm upgrade --install --namespace=monitoring  --create-namespace prometheus prometheus-community/kube-prometheus-stack \
            --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[0]=uptime-test \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[1]=default \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[2]=monitoring \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[3]=kube-system \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[4]=cert-manager \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[5]=ingress-nginx \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[6]=prometheus \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[7]=grafana \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[8]=kube-prometheus-stack \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[9]=prometheus-operator \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[10]=nginx-ingress \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[11]=nginx-ingress-controller \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[12]=nginx-ingress-controller \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[13]=nginx-ingress-controller \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[14]=nginx-ingress-controller \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[15]=nginx-ingress-controller \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[16]=nginx-ingress-controller \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchNames[17]=nginx-ing \
            --set prometheus.prometheusSpec.additionalScrapeConfigs[0].job_name=push-gateway \
            --set prometheus.prometheusSpec.additionalScrapeConfigs[0].static_configs[0].targets[0]=prometheus-pushgateway:9091 
          
          kubectl create secret generic basic-auth --namespace=monitoring  --from-file=./prometheus/auth --dry-run=client -o yaml | kubectl apply -f -
          
          helm upgrade --install --namespace=monitoring --create-namespace prometheus-pushgateway prometheus-community/prometheus-pushgateway \
            --set ingress.enabled=true \
            --set ingress.annotations."nginx\\.ingress\\.kubernetes\\.io/auth-type"=basic \
            --set ingress.annotations."nginx\\.ingress\\.kubernetes\\.io/auth-secret"=basic-auth \
            --set ingress.annotations."nginx\\.ingress\\.kubernetes\\.io/auth-realm"='Authentication Required' \
            --set ingress.className=nginx \
            --set ingress.hosts[0]=ppushgateway.yaronshani.me 






